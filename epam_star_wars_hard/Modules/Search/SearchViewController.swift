//
//  SearchViewController.swift
//  epam_star_wars_hard
//
//  Created by Nickolay Truhin on 18.02.2020.
//  Copyright (c) 2020 Nickolay Truhin. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class SearchViewController: UIViewController {
    
    // MARK: - Public properties -
    
    @IBOutlet var searchBar: UISearchBar!
    @IBOutlet var collectionView: UICollectionView!
    
    var presenter: SearchPresenterInterface!
    var numberOfItemsPerRow : Int = 2
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        presenter.viewDidLoad()
        
        searchBar.delegate = self
        collectionView.dataSource = self
        collectionView.delegate = self
    }
    
}

// MARK: - Extensions -

extension SearchViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return presenter.numberOfItems()
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let item = presenter.item(at: indexPath)
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath) as! PeopleCell
        
        debugPrint("text: \(searchBar.text?.isEmpty)")
        cell.configure(with: PeopleCellData.init(
            model: item,
            didDeleteClick: {
                self.presenter.didDeleteItem(at: indexPath)
                collectionView.deleteItems(at: [indexPath])
            },
            deletable: searchBar.text?.isEmpty ?? true
        ))
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        presenter.didSelectItem(at: indexPath)
    }
}

fileprivate var searchTask: DispatchWorkItem?

extension SearchViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        searchTask?.cancel()
        
        searchTask = DispatchWorkItem { [weak self] in
            self?.didTextApplied(searchText, searchBar)
        }
        
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.75, execute: searchTask!)
    }
    
    func didTextApplied(_ text: String, _ searchBar: UISearchBar) {
        self.searchBar = searchBar
        presenter.searchDidSubmitted(text)
    }
}

extension SearchViewController: SearchViewInterface {    
    func reloadData() {
        self.collectionView.reloadData()
    }
    
    func setLoadingVisible(_ visible: Bool) {
        searchBar?.isLoading = visible
    }
    
}
